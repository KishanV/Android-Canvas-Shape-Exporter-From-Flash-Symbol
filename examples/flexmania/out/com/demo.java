package com;import android.content.Context;
import Views.api.FMView;
import android.graphics.LinearGradient;
import android.graphics.Shader.TileMode;
import android.graphics.Path;
import Views.api.ShapeView;
import Views.api.shapeImg;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Canvas;
import com.linedeer.music.player.ab; public class demo extends shapeImg{ class Path0 extends Path{  	public Path0() {			moveTo(98f, 78.4f);			quadTo(97.75f, 97.65f, 78.45f, 97.85f);			lineTo(78f, 97.85f);			quadTo(46.15f, 89f, 22f, 97.85f);			lineTo(21.55f, 97.85f);			quadTo(2.3f, 97.65f, 2f, 78.4f);			lineTo(2f, 77.85f);			quadTo(10.3f, 47.8f, 2f, 21.95f);			lineTo(2f, 21.4f);			quadTo(2.3f, 2.2f, 21.55f, 1.95f);			lineTo(22f, 1.95f);			quadTo(50.35f, 9.4f, 78f, 1.95f);			lineTo(78.5f, 1.95f);			quadTo(97.75f, 2.2f, 98f, 21.4f);			lineTo(98f, 21.95f);			quadTo(90.3f, 47.15f, 98f, 77.85f);			lineTo(98f, 78.4f);			moveTo(50.95f, 37.85f);			lineTo(60.65f, 34f);			lineTo(56.85f, 24.25f);			lineTo(47.05f, 28.1f);			lineTo(47.05f, 28.15f);			lineTo(41.95f, 30.1f);			lineTo(50.7f, 52.3f);			quadTo(48f, 51.9f, 45.25f, 53f);			quadTo(41.1f, 54.6f, 39.35f, 58.7f);			quadTo(37.55f, 62.8f, 39.2f, 66.95f);			quadTo(40.85f, 71.1f, 44.95f, 72.85f);			quadTo(49f, 74.6f, 53.15f, 73f);			quadTo(57.3f, 71.35f, 59.05f, 67.25f);			quadTo(60.85f, 63.2f, 59.2f, 59.05f);			lineTo(58.65f, 57.8f);			lineTo(58.75f, 57.75f);			lineTo(50.95f, 37.85f);	}}class Path1 extends Path{  	public Path1() {			moveTo(98f, 21.4f);			quadTo(100f, 26.8f, 100f, 33f);			lineTo(100f, 66.8f);			quadTo(100f, 73f, 98f, 78.4f);			lineTo(98f, 77.85f);			quadTo(90.3f, 47.15f, 98f, 21.95f);			lineTo(98f, 21.4f);			moveTo(78.45f, 97.85f);			quadTo(73.1f, 99.8f, 67f, 99.8f);			lineTo(33f, 99.8f);			quadTo(26.9f, 99.8f, 21.55f, 97.85f);			lineTo(22f, 97.85f);			quadTo(46.15f, 89f, 78f, 97.85f);			lineTo(78.45f, 97.85f);			moveTo(2f, 78.4f);			quadTo(0f, 73f, 0f, 66.8f);			lineTo(0f, 33f);			quadTo(0f, 26.8f, 2f, 21.4f);			lineTo(2f, 21.95f);			quadTo(10.3f, 47.8f, 2f, 77.85f);			lineTo(2f, 78.4f);			moveTo(21.55f, 1.95f);			quadTo(26.85f, 0f, 33f, 0f);			lineTo(67f, 0f);			quadTo(73.15f, 0f, 78.5f, 1.95f);			lineTo(78f, 1.95f);			quadTo(50.35f, 9.4f, 22f, 1.95f);			lineTo(21.55f, 1.95f);	}}class Path2 extends Path{  	public Path2() {			moveTo(47.05f, 28.15f);			lineTo(47.05f, 28.1f);			lineTo(56.85f, 24.25f);			lineTo(60.65f, 34f);			lineTo(50.95f, 37.85f);			lineTo(50.85f, 37.85f);			lineTo(47.05f, 28.15f);	}}class Path3 extends Path{  	public Path3() {			moveTo(47.05f, 28.15f);			lineTo(50.85f, 37.85f);			lineTo(50.95f, 37.85f);			lineTo(58.75f, 57.75f);			lineTo(58.65f, 57.8f);			quadTo(56.9f, 54.6f, 53.45f, 53.1f);			quadTo(52.05f, 52.5f, 50.7f, 52.3f);			lineTo(41.95f, 30.1f);			lineTo(47.05f, 28.15f);	}}class Path4 extends Path{  	public Path4() {			moveTo(58.65f, 57.8f);			lineTo(59.2f, 59.05f);			quadTo(60.85f, 63.2f, 59.05f, 67.25f);			quadTo(57.3f, 71.35f, 53.15f, 73f);			quadTo(49f, 74.6f, 44.95f, 72.85f);			quadTo(40.85f, 71.1f, 39.2f, 66.95f);			quadTo(37.55f, 62.8f, 39.35f, 58.7f);			quadTo(41.1f, 54.6f, 45.25f, 53f);			quadTo(48f, 51.9f, 50.7f, 52.3f);			quadTo(52.05f, 52.5f, 53.45f, 53.1f);			quadTo(56.9f, 54.6f, 58.65f, 57.8f);	}}		public Paint P0 = new Paint(); 		public static int Color0 = (0xFF352f51); 		public Path0 S0 = new Path0();		public Paint P1 = new Paint(); 		public static int Color1 = (0xFFe95f7d); 		public Path1 S1 = new Path1();		public Paint P2 = new Paint(); 		public static int Color2 = (0xFFffffff); 		public Path2 S2 = new Path2();		public Paint P3 = new Paint(); 		public static int Color3 = 0; 		public Path3 S3 = new Path3();		public Paint P4 = new Paint(); 		public static int Color4 = 0; 		public Path4 S4 = new Path4();		public static float Ht = 99.8F; 		public static float Wh = 100F;  		public demo(int width,int height,int x,int y) {			this.width = width;			this.height = height;			init((float)width/(float)Wh, (float)height/(float)Ht, x, y); 			LinearGradient Lg  = null;			S0.transform(matrix);			P0.setColor(0xFF352f51);			P0.setAntiAlias(true);			S1.transform(matrix);			P1.setColor(0xFFe95f7d);			P1.setAntiAlias(true);			S2.transform(matrix);			Lg = new LinearGradient(49,33,59,29, new int[]{0xffd6d6d6,0xffffffff}, new float[]{0.0f,1.0f}, TileMode.MIRROR);			Lg.setLocalMatrix(matrix);			P2.setShader(Lg);			P2.setAntiAlias(true);			S3.transform(matrix);			Lg = new LinearGradient(56,59,44,29, new int[]{0xffd6d6d6,0xffffffff,0xff000000,0xff000000}, new float[]{0.0f,1.0f,1.0f,1.0f}, TileMode.MIRROR);			Lg.setLocalMatrix(matrix);			P3.setShader(Lg);			P3.setAntiAlias(true);			S4.transform(matrix);			P4.setColor(0xFFffffff);			P4.setAntiAlias(true);			mask = S0;			maskPaint = P0;		} 		public void draw(Canvas canvas) { 			if(drawing){				canvas.drawPath(S0, P0);				canvas.drawPath(S1, P1);				canvas.drawPath(S2, P2);				canvas.drawPath(S3, P3);				canvas.drawPath(S4, P4);			}		} 		@Override
 		public void setX(int x) {			super.setX(x);			 S0.transform(matrix);			 S1.transform(matrix);			 S2.transform(matrix);			 S3.transform(matrix);			 S4.transform(matrix);		} 		@Override
 		public void setY(int x) {			super.setY(x);			 S0.transform(matrix);			 S1.transform(matrix);			 S2.transform(matrix);			 S3.transform(matrix);			 S4.transform(matrix);		} 		@Override
 		public void setSize(int wh, int ht) {			super.setSize(wh, ht);			 S0.transform(matrix);			 S1.transform(matrix);			 S2.transform(matrix);			 S3.transform(matrix);			 S4.transform(matrix);		} 		 public static ShapeView getFMview(Context context,boolean mask){
		   ShapeView view = new ShapeView(context, ab.cd.getHt((int) Wh),ab.cd.getHt((int) Ht));
		   final demo viewImg = new demo(ab.cd.getHt((int) Wh),ab.cd.getHt((int) Ht),0,0);
		   view.mask = mask;
		   view.img = viewImg;
		   viewImg.mask = viewImg.S0;
		   viewImg.maskPaint = viewImg.P0; 
		   return view;
		 }      		 public static demo getShape(){
		   final demo viewImg = new demo(ab.cd.getHt((int) Wh),ab.cd.getHt((int) Ht),0,0);
		   viewImg.mask = viewImg.S0;
		   viewImg.maskPaint = viewImg.P0; 
		   return viewImg;
		 }		 public static int getBackgroundColor(){ return Color0; }
}//Finished...! 